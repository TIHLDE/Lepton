# Generated by Django 3.2.12 on 2022-03-04 14:16

from django.db import migrations
from django.db.transaction import atomic
from django.utils.text import slugify

from app.common.enums import GroupType
from app.content.models.user import CLASS

THIS_YEAR = 2022
STUDY_FULL = (
    (1, "Dataingeni√∏r"),
    (2, "Digital forretningsutvikling"),
    (3, "Digital infrastruktur og cybersikkerhet"),
    (4, "Digital samhandling"),
    (5, "Drift (studie)"),
    (6, "Informasjonsbehandling"),
)


@atomic
def migrate_users(apps, schema_editor):
    User = apps.get_model("content", "User")
    Group = apps.get_model("group", "Group")
    Membership = apps.get_model("group", "Membership")
    migrate_year(User, Group, Membership)
    migrate_study(User, Group, Membership)


def migrate_year(User, Group, Membership):
    for year, _ in CLASS:

        users = User.objects.filter(user_class=year)
        if year == -1:
            group_name = "2018"
        else:
            group_name = str(THIS_YEAR - year)

        designated_group, _ = Group.objects.get_or_create(
            name=group_name, slug=slugify(group_name), type=GroupType.STUDYYEAR
        )
        memberships = [
            Membership(user=user, group=designated_group) for user in users
        ]
        Membership.objects.bulk_create(memberships)


def migrate_study(User, Group, Membership):
    for number, group_name in STUDY_FULL:
        users = User.objects.filter(user_study=number)
        designated_group, _ = Group.objects.get_or_create(
            name=group_name, slug=slugify(group_name), type=GroupType.STUDY
        )
        memberships = [
            Membership(user=user, group=designated_group) for user in users
        ]
        Membership.objects.bulk_create(memberships)


def reverse_func(apps, schema_editor):
    Group = apps.get_model("group", "Group")

    for year, _ in CLASS:
        if year == -1:
            group_name = "2018"
        else:
            group_name = str(THIS_YEAR - year)

        Group.objects.filter(name=group_name).delete()

    for number, group_name in STUDY_FULL:
        Group.objects.filter(name=group_name).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('content', '0042_news_creator'),
    ]

    operations = [
        migrations.RunPython(migrate_users, reverse_func),
    ]
